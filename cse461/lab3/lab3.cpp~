/*
Brian Ackley
CSE461
Spring 2015
Lab 3
*/

#include <iostream>
#include <string>
#include <fstream>
#include <sstream>
#include <vector>
#include "Sdisk.h"

using namespace std;

class Filesys: public Sdisk
{
public:
	Filesys(string filename);
	int fsclose();
	int fssynch();
	int newfile(string file);
	int rmfile(string file);
	int getfirstblock(string file);
	int addblock(string file, string block);
	int delblock(string file, int blocknumber);
	int readblock(string file, int blocknumber, string& buffer);
	int writeblock(string file, int blocknumber, string buffer);
	int nextblock(string file, int blocknumber);
	vector<string> block(string buffer, int b);
private:
	int rootsize;           	// maximum number of entries in ROOT
	int fatsize;            	// number of blocks occupied by FAT
	vector<string> filename;   // filenames in ROOT
	vector<int> firstblock; 	// firstblocks in ROOT
	vector<int> fat;            // FAT
};

Filesys::Filesys(string filename) : Sdisk(string diskname)
{

}

int Filesys::fsclose()
{

}

int Filesys::fssynch()
{

}

int Filesys::newfile(string file)
{

}

int Filesys::rmfile(string file)
{

}

int Filesys::getfirstblock(string file)
{

}

int Filesys::addblock(string file, string block)
{

}

int Filesys::delblock(string file, int blocknumber)
{

}

int Filesys::readblock(string file, int blocknumber, string& buffer)
{

}

int Filesys::writeblock(string file, int blocknumber, string buffer)
{

}

int Filesys::nextblock(string file, int blocknumber)
{

}

vector<string> Filesys::block(string buffer, int b)
{
// blocks the buffer into a list of blocks of size b
	vector<string> blocks;
	int numberofblocks = 0;

	if (buffer.length() % b == 0) 
	{
		numberofblocks = buffer.length() / b;
	}
	else 
	{
		numberofblocks = buffer.length() / b + 1;
	}

	string tempblock;
	for (int i = 0; i < numberofblocks; i++)
	{
		tempblock = buffer.substr(b * i, b);
		blocks.push_back(tempblock);
	}

	int lastblock = blocks.size() - 1;

	for (int i = blocks[lastblock].length(); i < b; i++)
	{
		blocks[lastblock] += "#";
	}

	return blocks;
}


int main()
{

}
