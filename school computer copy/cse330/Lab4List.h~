// Lab4List.h
// after Timothy Budd, Data Structures in C++
// linked list basics only; not complete
// to be worked on in in Lab4;
// KV, October 2013;

//#pragma once
#ifndef LIST4_H_
#define LIST4_H_

#include <algorithm>
using namespace std;

// forward declaration of classes used
// by class List

template <class T> class Link;
template <class T> class ListIterator;
   //add for lab 4:
template <class T> class RListIterator;


template <class T>
class List
{
public:

	typedef ListIterator<T> iterator;
	//typedef RListIterator<T> riterator;
	//typedef ListCirculator<T> circulator;

	List();
	List(const List<T>& l);
	~List();

	bool empty() const;

	T& back() const;
	T& front() const;
	//void push_front(const T & x);
	void push_back(const T & x);
	//void pop_front();
	void pop_back(); 

	iterator begin() const;
	iterator end() const;

	//define each one for lab 4:
	riterator rbegin() const;
	riterator rend() const;

	circulator cbegin() const;

	void inseet(iterator pos, const T & x);
	void erase(iterator pos);

protected:

	Link<T> * firstLink;
	Link<T> * lastLink;
};

// helper class for class List; notice the
// private interface and data members;
// notice the friend declaration that allow
// class List to access class Link's data 
// members directly;
template <class T>
class Link
{
private:
	Link(const T & x)
		: value(x), nextLink(0), prevLink(0)
	{}

	Link(const Link<T>& other)
		:value (other.value)
	{
		nextLink = other.nextLink;
		prevLink = other.prevLink;
	}

	~Link();

	T value;
	Link<T>* nextLink;
	Link<T>* prevLink;

	friend class List<T>;
	friend class ListIterator<T>;
	friend class RListIterator<T>;
	//friend class ListCirculator<T>;

};

// implements a "sliding window" over the
// Links of a List;
template <class T>
class ListIterator
{
 public:
        typedef ListIterator<T> iterator;

        ListIterator() : currentLink(0)
	{}
	ListIterator(Link<T> * alink)
	{
		currentLink = alink;
	}
	ListIterator(const ListIterator<T>& other)
	{
		currentLink = other.currentLink;
	}

	T & operator*();

	ListIterator<T> & operator=(const ListIterator<T> & rhs);
	bool operator==(const iterator & rhs) const;
	bool operator!=(const iterator & rhs) const;
	// T. Budd has the ++ and -- operators backwards
	// regarding pre- and post-increment;
	ListIterator<T>& operator++(); // pre-increment; ++itr
	ListIterator<T> operator++(int); // post-increment; itr++

protected:
	Link<T> * currentLink; 
    // T.Budd includes pointer to List iterated over;
	// this is not necessary;

	friend class List<T>;
};


//for lab 4: turn into reverse iterator
template <class T>
class RListIterator
{
 public:
        typedef ListIterator<T> iterator;

        ListIterator() : currentLink(0)
	{}
	ListIterator(Link<T> * alink)
	{
		currentLink = alink;
	}
	ListIterator(const ListIterator<T>& other)
	{
		currentLink = other.currentLink;
	}

	T & operator*();

	ListIterator<T> & operator=(const ListIterator<T> & rhs);
	bool operator==(const iterator & rhs) const;
	bool operator!=(const iterator & rhs) const;
	// T. Budd has the ++ and -- operators backwards
	// regarding pre- and post-increment;
	ListIterator<T>& operator++(); // pre-increment; ++itr
	ListIterator<T> operator++(int); // post-increment; itr++

protected:
	Link<T> * currentLink; 
    // T.Budd includes pointer to List iterated over;
	// this is not necessary;

	friend class List<T>;
};



// constructors and member functions of class List<T>

template <class T>
List<T>::List()
: firstLink(0), lastLink(0)
{}

// copy constructor; T. Budd does not have it, but
// it is important for the compilation of our programs;
template <class T>
List<T>::List(const List<T>& other)
{
	firstLink = 0;
	lastLink = 0;

	if (!other.empty())
	{
		iterator start = other.begin();
		iterator stop = other.end();

		firstLink = new Link<T>(*start);
		Link<T>* current = firstLink;
		++start;

		while (start != stop)
		{
			T value = *start;
			Link<T>* newlink = new Link<T>(value);
			newlink->prevLink = current;
			current->nextLink = newlink;
			
			current = newlink;
			++start;
			
		}
		lastLink = current;
	}
}

// destructor; absolutely necessary to avoid
// memory leaks;
template <class T>
List<T>::~List()
{
	Link<T>* first = firstLink;
	while (first != 0)
	{
		Link<T> * next = first->nextLink;

		first->nextLink = 0; // unhook Link<T> first
		first->prevLink = 0; // then delete
		delete first;
		
		first = next;
	}
}

template <class T>
bool List<T>::empty() const
{
	return firstLink == 0;
}

template <class T>
T& List<T>::back() const
{
	return lastLink->value;
}


template <class T>
T& List<T>::front() const
{
	return firstLink->value;
}

template <class T>
void List<T>::push_back(const T & x)
{
	Link<T> * newback = new Link<T>(x);

	if (empty())
	{
		firstLink = newback;
		lastLink = newback;
	}
	else
	{
		lastLink->nextLink = newback;
		newback->prevLink = lastLink;
		lastLink = newback;
	}
}

template <class T>
void List<T>::pop_back()
{
	if (firstLink == 0)
		return;

	Link<T>* save = lastLink;

	lastLink = lastLink->prevLink;
	
	if (lastLink != 0)
		lastLink->nextLink = 0;
	else
		firstLink = 0;

	save->prevLink = 0;
	delete save;

}

template <class T>
ListIterator<T> List<T>::begin() const
{
	return ListIterator<T>(firstLink);
}

template <class T>
ListIterator<T> List<T>::end() const
{
	return ListIterator<T>(0);
}


template <class T>
Link<T>::~Link()
{
	if (nextLink != 0)
		delete nextLink;
	if (prevLink != 0)
		delete prevLink;
}


//insert new value into list
void List<T>::insert(iterator pos, const T& val)
{
   if (begin() == pos)
      push_front(x);
   else if (end() == pos)
      push_back(x);
   else if (pos.currentLink == 0)
      ;
   else
      {
	 //add link with value val into middle of linked list
	 Link<T>  * newlink = new Link<T>(x);
	 Link<T> * atpos = pos.currentLink;

	 (atpos->prevLink)->nextLink = newlink;

	 newlink->prevLink = atpos->prevLink;
	 newlink->nextLink = atpos;
	 atpos->prevLink = newlink;
      }
}

void List<T>::erase(iterator pos)
{
   if (pos == begin())
      pop_front();
   else if (pop == end())
      pop_back();
   else if (pos.currentLink == 0)
      ;
   else
   {
      Link<T>* torem = pos.currentLink;

      torem->prevLink)->nextLink = torem->nextLink;
      if(torem->nextLink != 0)
      {
	 torem->nextLink->prevLink = torem->prevLink;
      }
      else
	 lastLink = torem->prevlink;

      torem->prevlink = 0;
      torem->nextLink = 0;
      delete torem;
   }
}

// member functions of class ListIterator<T>

template <class T>
T& ListIterator<T>::operator*()
{
  return currentLink->value;
}

template <class T>
ListIterator<T> & ListIterator<T>::operator=(const ListIterator<T> & rhs)
{
	currentLink = rhs.currentLink;
	return *this;
}

template <class T>
bool ListIterator<T>::operator==(const iterator & rhs) const
{
  return currentLink == rhs.currentLink;
	
}

template <class T>
bool ListIterator<T>::operator!=(const iterator & rhs) const
{
  return currentLink != rhs.currentLink;
}

// ++itr ; returns iterator after being advanced; 
template <class T>
ListIterator<T>&  ListIterator<T>::operator++()
{
	currentLink = currentLink->nextLink;
	return *this;
}

// itr++; returns a clone of the current iterator;
// then advances;
template <class T>
ListIterator<T> ListIterator<T>::operator++(int)
{
	ListIterator<T> clone(currentLink);
	currentLink = currentLink->nextLink;
	return clone;
}


#endif









